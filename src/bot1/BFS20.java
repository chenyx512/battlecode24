
// DO NOT MODIFY THIS FILE
// auto generated by gen_bfs.py
package bot1;

import battlecode.common.*;

public class BFS20 extends RobotPlayer {


    static MapLocation l78; // location representing relative coordinate (-4, -2)
    static double d78; // shortest distance to location from current location
    // static Direction dir78; // best direction to take now to optimally get to location
    static double score78; // heuristic distance from location to target

    static MapLocation l93; // location representing relative coordinate (-4, -1)
    static double d93; // shortest distance to location from current location
    // static Direction dir93; // best direction to take now to optimally get to location
    static double score93; // heuristic distance from location to target

    static MapLocation l108; // location representing relative coordinate (-4, 0)
    static double d108; // shortest distance to location from current location
    // static Direction dir108; // best direction to take now to optimally get to location
    static double score108; // heuristic distance from location to target

    static MapLocation l123; // location representing relative coordinate (-4, 1)
    static double d123; // shortest distance to location from current location
    // static Direction dir123; // best direction to take now to optimally get to location
    static double score123; // heuristic distance from location to target

    static MapLocation l138; // location representing relative coordinate (-4, 2)
    static double d138; // shortest distance to location from current location
    // static Direction dir138; // best direction to take now to optimally get to location
    static double score138; // heuristic distance from location to target

    static MapLocation l64; // location representing relative coordinate (-3, -3)
    static double d64; // shortest distance to location from current location
    // static Direction dir64; // best direction to take now to optimally get to location
    static double score64; // heuristic distance from location to target

    static MapLocation l79; // location representing relative coordinate (-3, -2)
    static double d79; // shortest distance to location from current location
    // static Direction dir79; // best direction to take now to optimally get to location
    static double score79; // heuristic distance from location to target

    static MapLocation l94; // location representing relative coordinate (-3, -1)
    static double d94; // shortest distance to location from current location
    // static Direction dir94; // best direction to take now to optimally get to location
    static double score94; // heuristic distance from location to target

    static MapLocation l109; // location representing relative coordinate (-3, 0)
    static double d109; // shortest distance to location from current location
    // static Direction dir109; // best direction to take now to optimally get to location
    static double score109; // heuristic distance from location to target

    static MapLocation l124; // location representing relative coordinate (-3, 1)
    static double d124; // shortest distance to location from current location
    // static Direction dir124; // best direction to take now to optimally get to location
    static double score124; // heuristic distance from location to target

    static MapLocation l139; // location representing relative coordinate (-3, 2)
    static double d139; // shortest distance to location from current location
    // static Direction dir139; // best direction to take now to optimally get to location
    static double score139; // heuristic distance from location to target

    static MapLocation l154; // location representing relative coordinate (-3, 3)
    static double d154; // shortest distance to location from current location
    // static Direction dir154; // best direction to take now to optimally get to location
    static double score154; // heuristic distance from location to target

    static MapLocation l50; // location representing relative coordinate (-2, -4)
    static double d50; // shortest distance to location from current location
    // static Direction dir50; // best direction to take now to optimally get to location
    static double score50; // heuristic distance from location to target

    static MapLocation l65; // location representing relative coordinate (-2, -3)
    static double d65; // shortest distance to location from current location
    // static Direction dir65; // best direction to take now to optimally get to location
    static double score65; // heuristic distance from location to target

    static MapLocation l80; // location representing relative coordinate (-2, -2)
    static double d80; // shortest distance to location from current location
    // static Direction dir80; // best direction to take now to optimally get to location
    static double score80; // heuristic distance from location to target

    static MapLocation l95; // location representing relative coordinate (-2, -1)
    static double d95; // shortest distance to location from current location
    // static Direction dir95; // best direction to take now to optimally get to location
    static double score95; // heuristic distance from location to target

    static MapLocation l110; // location representing relative coordinate (-2, 0)
    static double d110; // shortest distance to location from current location
    // static Direction dir110; // best direction to take now to optimally get to location
    static double score110; // heuristic distance from location to target

    static MapLocation l125; // location representing relative coordinate (-2, 1)
    static double d125; // shortest distance to location from current location
    // static Direction dir125; // best direction to take now to optimally get to location
    static double score125; // heuristic distance from location to target

    static MapLocation l140; // location representing relative coordinate (-2, 2)
    static double d140; // shortest distance to location from current location
    // static Direction dir140; // best direction to take now to optimally get to location
    static double score140; // heuristic distance from location to target

    static MapLocation l155; // location representing relative coordinate (-2, 3)
    static double d155; // shortest distance to location from current location
    // static Direction dir155; // best direction to take now to optimally get to location
    static double score155; // heuristic distance from location to target

    static MapLocation l170; // location representing relative coordinate (-2, 4)
    static double d170; // shortest distance to location from current location
    // static Direction dir170; // best direction to take now to optimally get to location
    static double score170; // heuristic distance from location to target

    static MapLocation l51; // location representing relative coordinate (-1, -4)
    static double d51; // shortest distance to location from current location
    // static Direction dir51; // best direction to take now to optimally get to location
    static double score51; // heuristic distance from location to target

    static MapLocation l66; // location representing relative coordinate (-1, -3)
    static double d66; // shortest distance to location from current location
    // static Direction dir66; // best direction to take now to optimally get to location
    static double score66; // heuristic distance from location to target

    static MapLocation l81; // location representing relative coordinate (-1, -2)
    static double d81; // shortest distance to location from current location
    // static Direction dir81; // best direction to take now to optimally get to location
    static double score81; // heuristic distance from location to target

    static MapLocation l96; // location representing relative coordinate (-1, -1)
    static double d96; // shortest distance to location from current location
    // static Direction dir96; // best direction to take now to optimally get to location
    static double score96; // heuristic distance from location to target

    static MapLocation l111; // location representing relative coordinate (-1, 0)
    static double d111; // shortest distance to location from current location
    // static Direction dir111; // best direction to take now to optimally get to location
    static double score111; // heuristic distance from location to target

    static MapLocation l126; // location representing relative coordinate (-1, 1)
    static double d126; // shortest distance to location from current location
    // static Direction dir126; // best direction to take now to optimally get to location
    static double score126; // heuristic distance from location to target

    static MapLocation l141; // location representing relative coordinate (-1, 2)
    static double d141; // shortest distance to location from current location
    // static Direction dir141; // best direction to take now to optimally get to location
    static double score141; // heuristic distance from location to target

    static MapLocation l156; // location representing relative coordinate (-1, 3)
    static double d156; // shortest distance to location from current location
    // static Direction dir156; // best direction to take now to optimally get to location
    static double score156; // heuristic distance from location to target

    static MapLocation l171; // location representing relative coordinate (-1, 4)
    static double d171; // shortest distance to location from current location
    // static Direction dir171; // best direction to take now to optimally get to location
    static double score171; // heuristic distance from location to target

    static MapLocation l52; // location representing relative coordinate (0, -4)
    static double d52; // shortest distance to location from current location
    // static Direction dir52; // best direction to take now to optimally get to location
    static double score52; // heuristic distance from location to target

    static MapLocation l67; // location representing relative coordinate (0, -3)
    static double d67; // shortest distance to location from current location
    // static Direction dir67; // best direction to take now to optimally get to location
    static double score67; // heuristic distance from location to target

    static MapLocation l82; // location representing relative coordinate (0, -2)
    static double d82; // shortest distance to location from current location
    // static Direction dir82; // best direction to take now to optimally get to location
    static double score82; // heuristic distance from location to target

    static MapLocation l97; // location representing relative coordinate (0, -1)
    static double d97; // shortest distance to location from current location
    // static Direction dir97; // best direction to take now to optimally get to location
    static double score97; // heuristic distance from location to target

    static MapLocation l112; // location representing relative coordinate (0, 0)
    static double d112; // shortest distance to location from current location
    // static Direction dir112; // best direction to take now to optimally get to location
    static double score112; // heuristic distance from location to target

    static MapLocation l127; // location representing relative coordinate (0, 1)
    static double d127; // shortest distance to location from current location
    // static Direction dir127; // best direction to take now to optimally get to location
    static double score127; // heuristic distance from location to target

    static MapLocation l142; // location representing relative coordinate (0, 2)
    static double d142; // shortest distance to location from current location
    // static Direction dir142; // best direction to take now to optimally get to location
    static double score142; // heuristic distance from location to target

    static MapLocation l157; // location representing relative coordinate (0, 3)
    static double d157; // shortest distance to location from current location
    // static Direction dir157; // best direction to take now to optimally get to location
    static double score157; // heuristic distance from location to target

    static MapLocation l172; // location representing relative coordinate (0, 4)
    static double d172; // shortest distance to location from current location
    // static Direction dir172; // best direction to take now to optimally get to location
    static double score172; // heuristic distance from location to target

    static MapLocation l53; // location representing relative coordinate (1, -4)
    static double d53; // shortest distance to location from current location
    // static Direction dir53; // best direction to take now to optimally get to location
    static double score53; // heuristic distance from location to target

    static MapLocation l68; // location representing relative coordinate (1, -3)
    static double d68; // shortest distance to location from current location
    // static Direction dir68; // best direction to take now to optimally get to location
    static double score68; // heuristic distance from location to target

    static MapLocation l83; // location representing relative coordinate (1, -2)
    static double d83; // shortest distance to location from current location
    // static Direction dir83; // best direction to take now to optimally get to location
    static double score83; // heuristic distance from location to target

    static MapLocation l98; // location representing relative coordinate (1, -1)
    static double d98; // shortest distance to location from current location
    // static Direction dir98; // best direction to take now to optimally get to location
    static double score98; // heuristic distance from location to target

    static MapLocation l113; // location representing relative coordinate (1, 0)
    static double d113; // shortest distance to location from current location
    // static Direction dir113; // best direction to take now to optimally get to location
    static double score113; // heuristic distance from location to target

    static MapLocation l128; // location representing relative coordinate (1, 1)
    static double d128; // shortest distance to location from current location
    // static Direction dir128; // best direction to take now to optimally get to location
    static double score128; // heuristic distance from location to target

    static MapLocation l143; // location representing relative coordinate (1, 2)
    static double d143; // shortest distance to location from current location
    // static Direction dir143; // best direction to take now to optimally get to location
    static double score143; // heuristic distance from location to target

    static MapLocation l158; // location representing relative coordinate (1, 3)
    static double d158; // shortest distance to location from current location
    // static Direction dir158; // best direction to take now to optimally get to location
    static double score158; // heuristic distance from location to target

    static MapLocation l173; // location representing relative coordinate (1, 4)
    static double d173; // shortest distance to location from current location
    // static Direction dir173; // best direction to take now to optimally get to location
    static double score173; // heuristic distance from location to target

    static MapLocation l54; // location representing relative coordinate (2, -4)
    static double d54; // shortest distance to location from current location
    // static Direction dir54; // best direction to take now to optimally get to location
    static double score54; // heuristic distance from location to target

    static MapLocation l69; // location representing relative coordinate (2, -3)
    static double d69; // shortest distance to location from current location
    // static Direction dir69; // best direction to take now to optimally get to location
    static double score69; // heuristic distance from location to target

    static MapLocation l84; // location representing relative coordinate (2, -2)
    static double d84; // shortest distance to location from current location
    // static Direction dir84; // best direction to take now to optimally get to location
    static double score84; // heuristic distance from location to target

    static MapLocation l99; // location representing relative coordinate (2, -1)
    static double d99; // shortest distance to location from current location
    // static Direction dir99; // best direction to take now to optimally get to location
    static double score99; // heuristic distance from location to target

    static MapLocation l114; // location representing relative coordinate (2, 0)
    static double d114; // shortest distance to location from current location
    // static Direction dir114; // best direction to take now to optimally get to location
    static double score114; // heuristic distance from location to target

    static MapLocation l129; // location representing relative coordinate (2, 1)
    static double d129; // shortest distance to location from current location
    // static Direction dir129; // best direction to take now to optimally get to location
    static double score129; // heuristic distance from location to target

    static MapLocation l144; // location representing relative coordinate (2, 2)
    static double d144; // shortest distance to location from current location
    // static Direction dir144; // best direction to take now to optimally get to location
    static double score144; // heuristic distance from location to target

    static MapLocation l159; // location representing relative coordinate (2, 3)
    static double d159; // shortest distance to location from current location
    // static Direction dir159; // best direction to take now to optimally get to location
    static double score159; // heuristic distance from location to target

    static MapLocation l174; // location representing relative coordinate (2, 4)
    static double d174; // shortest distance to location from current location
    // static Direction dir174; // best direction to take now to optimally get to location
    static double score174; // heuristic distance from location to target

    static MapLocation l70; // location representing relative coordinate (3, -3)
    static double d70; // shortest distance to location from current location
    // static Direction dir70; // best direction to take now to optimally get to location
    static double score70; // heuristic distance from location to target

    static MapLocation l85; // location representing relative coordinate (3, -2)
    static double d85; // shortest distance to location from current location
    // static Direction dir85; // best direction to take now to optimally get to location
    static double score85; // heuristic distance from location to target

    static MapLocation l100; // location representing relative coordinate (3, -1)
    static double d100; // shortest distance to location from current location
    // static Direction dir100; // best direction to take now to optimally get to location
    static double score100; // heuristic distance from location to target

    static MapLocation l115; // location representing relative coordinate (3, 0)
    static double d115; // shortest distance to location from current location
    // static Direction dir115; // best direction to take now to optimally get to location
    static double score115; // heuristic distance from location to target

    static MapLocation l130; // location representing relative coordinate (3, 1)
    static double d130; // shortest distance to location from current location
    // static Direction dir130; // best direction to take now to optimally get to location
    static double score130; // heuristic distance from location to target

    static MapLocation l145; // location representing relative coordinate (3, 2)
    static double d145; // shortest distance to location from current location
    // static Direction dir145; // best direction to take now to optimally get to location
    static double score145; // heuristic distance from location to target

    static MapLocation l160; // location representing relative coordinate (3, 3)
    static double d160; // shortest distance to location from current location
    // static Direction dir160; // best direction to take now to optimally get to location
    static double score160; // heuristic distance from location to target

    static MapLocation l86; // location representing relative coordinate (4, -2)
    static double d86; // shortest distance to location from current location
    // static Direction dir86; // best direction to take now to optimally get to location
    static double score86; // heuristic distance from location to target

    static MapLocation l101; // location representing relative coordinate (4, -1)
    static double d101; // shortest distance to location from current location
    // static Direction dir101; // best direction to take now to optimally get to location
    static double score101; // heuristic distance from location to target

    static MapLocation l116; // location representing relative coordinate (4, 0)
    static double d116; // shortest distance to location from current location
    // static Direction dir116; // best direction to take now to optimally get to location
    static double score116; // heuristic distance from location to target

    static MapLocation l131; // location representing relative coordinate (4, 1)
    static double d131; // shortest distance to location from current location
    // static Direction dir131; // best direction to take now to optimally get to location
    static double score131; // heuristic distance from location to target

    static MapLocation l146; // location representing relative coordinate (4, 2)
    static double d146; // shortest distance to location from current location
    // static Direction dir146; // best direction to take now to optimally get to location
    static double score146; // heuristic distance from location to target


    private static final Direction[] DIRECTIONS = new Direction[] {null, Direction.NORTHEAST, Direction.NORTHWEST, Direction.SOUTHWEST, Direction.SOUTHEAST, Direction.EAST, Direction.NORTH, Direction.WEST, Direction.SOUTH};

    public final static Direction NORTH = Direction.NORTH;
    public final static Direction NORTHEAST = Direction.NORTHEAST;
    public final static Direction EAST = Direction.EAST;
    public final static Direction SOUTHEAST = Direction.SOUTHEAST;
    public final static Direction SOUTH = Direction.SOUTH;
    public final static Direction SOUTHWEST = Direction.SOUTHWEST;
    public final static Direction WEST = Direction.WEST;
    public final static Direction NORTHWEST = Direction.NORTHWEST;
    public final static Direction CENTER = Direction.CENTER;

    public static MapInfo mapInfo;
    public static Direction currentDir;
    public static double ans;
    public static double bestScore;
    public static double currDist;

    public static Direction direction(double dist) {
        if (dist==Double.POSITIVE_INFINITY) {
            return null;
        }
        return DIRECTIONS[(int)(dist * 16 % 16)];
    }

    public static void fill() throws GameActionException {

        l112 = rc.getLocation();
        d112 = 0;
        // dir112 = CENTER;

        l111 = l112.add(WEST); // (-1, 0) from (0, 0)
        d111 = 99999;
        // dir111 = null;

        l97 = l112.add(SOUTH); // (0, -1) from (0, 0)
        d97 = 99999;
        // dir97 = null;

        l127 = l112.add(NORTH); // (0, 1) from (0, 0)
        d127 = 99999;
        // dir127 = null;

        l113 = l112.add(EAST); // (1, 0) from (0, 0)
        d113 = 99999;
        // dir113 = null;

        l96 = l112.add(SOUTHWEST); // (-1, -1) from (0, 0)
        d96 = 99999;
        // dir96 = null;

        l126 = l112.add(NORTHWEST); // (-1, 1) from (0, 0)
        d126 = 99999;
        // dir126 = null;

        l98 = l112.add(SOUTHEAST); // (1, -1) from (0, 0)
        d98 = 99999;
        // dir98 = null;

        l128 = l112.add(NORTHEAST); // (1, 1) from (0, 0)
        d128 = 99999;
        // dir128 = null;

        l110 = l111.add(WEST); // (-2, 0) from (-1, 0)
        d110 = 99999;
        // dir110 = null;

        l82 = l97.add(SOUTH); // (0, -2) from (0, -1)
        d82 = 99999;
        // dir82 = null;

        l142 = l127.add(NORTH); // (0, 2) from (0, 1)
        d142 = 99999;
        // dir142 = null;

        l114 = l113.add(EAST); // (2, 0) from (1, 0)
        d114 = 99999;
        // dir114 = null;

        l95 = l111.add(SOUTHWEST); // (-2, -1) from (-1, 0)
        d95 = 99999;
        // dir95 = null;

        l125 = l111.add(NORTHWEST); // (-2, 1) from (-1, 0)
        d125 = 99999;
        // dir125 = null;

        l81 = l97.add(SOUTHWEST); // (-1, -2) from (0, -1)
        d81 = 99999;
        // dir81 = null;

        l141 = l127.add(NORTHWEST); // (-1, 2) from (0, 1)
        d141 = 99999;
        // dir141 = null;

        l83 = l97.add(SOUTHEAST); // (1, -2) from (0, -1)
        d83 = 99999;
        // dir83 = null;

        l143 = l127.add(NORTHEAST); // (1, 2) from (0, 1)
        d143 = 99999;
        // dir143 = null;

        l99 = l113.add(SOUTHEAST); // (2, -1) from (1, 0)
        d99 = 99999;
        // dir99 = null;

        l129 = l113.add(NORTHEAST); // (2, 1) from (1, 0)
        d129 = 99999;
        // dir129 = null;

        l80 = l96.add(SOUTHWEST); // (-2, -2) from (-1, -1)
        d80 = 99999;
        // dir80 = null;

        l140 = l126.add(NORTHWEST); // (-2, 2) from (-1, 1)
        d140 = 99999;
        // dir140 = null;

        l84 = l98.add(SOUTHEAST); // (2, -2) from (1, -1)
        d84 = 99999;
        // dir84 = null;

        l144 = l128.add(NORTHEAST); // (2, 2) from (1, 1)
        d144 = 99999;
        // dir144 = null;

        l109 = l110.add(WEST); // (-3, 0) from (-2, 0)
        d109 = 99999;
        // dir109 = null;

        l67 = l82.add(SOUTH); // (0, -3) from (0, -2)
        d67 = 99999;
        // dir67 = null;

        l157 = l142.add(NORTH); // (0, 3) from (0, 2)
        d157 = 99999;
        // dir157 = null;

        l115 = l114.add(EAST); // (3, 0) from (2, 0)
        d115 = 99999;
        // dir115 = null;

        l94 = l110.add(SOUTHWEST); // (-3, -1) from (-2, 0)
        d94 = 99999;
        // dir94 = null;

        l124 = l110.add(NORTHWEST); // (-3, 1) from (-2, 0)
        d124 = 99999;
        // dir124 = null;

        l66 = l82.add(SOUTHWEST); // (-1, -3) from (0, -2)
        d66 = 99999;
        // dir66 = null;

        l156 = l142.add(NORTHWEST); // (-1, 3) from (0, 2)
        d156 = 99999;
        // dir156 = null;

        l68 = l82.add(SOUTHEAST); // (1, -3) from (0, -2)
        d68 = 99999;
        // dir68 = null;

        l158 = l142.add(NORTHEAST); // (1, 3) from (0, 2)
        d158 = 99999;
        // dir158 = null;

        l100 = l114.add(SOUTHEAST); // (3, -1) from (2, 0)
        d100 = 99999;
        // dir100 = null;

        l130 = l114.add(NORTHEAST); // (3, 1) from (2, 0)
        d130 = 99999;
        // dir130 = null;

        l79 = l95.add(SOUTHWEST); // (-3, -2) from (-2, -1)
        d79 = 99999;
        // dir79 = null;

        l139 = l125.add(NORTHWEST); // (-3, 2) from (-2, 1)
        d139 = 99999;
        // dir139 = null;

        l65 = l81.add(SOUTHWEST); // (-2, -3) from (-1, -2)
        d65 = 99999;
        // dir65 = null;

        l155 = l141.add(NORTHWEST); // (-2, 3) from (-1, 2)
        d155 = 99999;
        // dir155 = null;

        l69 = l83.add(SOUTHEAST); // (2, -3) from (1, -2)
        d69 = 99999;
        // dir69 = null;

        l159 = l143.add(NORTHEAST); // (2, 3) from (1, 2)
        d159 = 99999;
        // dir159 = null;

        l85 = l99.add(SOUTHEAST); // (3, -2) from (2, -1)
        d85 = 99999;
        // dir85 = null;

        l145 = l129.add(NORTHEAST); // (3, 2) from (2, 1)
        d145 = 99999;
        // dir145 = null;

        l108 = l109.add(WEST); // (-4, 0) from (-3, 0)
        d108 = 99999;
        // dir108 = null;

        l52 = l67.add(SOUTH); // (0, -4) from (0, -3)
        d52 = 99999;
        // dir52 = null;

        l172 = l157.add(NORTH); // (0, 4) from (0, 3)
        d172 = 99999;
        // dir172 = null;

        l116 = l115.add(EAST); // (4, 0) from (3, 0)
        d116 = 99999;
        // dir116 = null;

        l93 = l109.add(SOUTHWEST); // (-4, -1) from (-3, 0)
        d93 = 99999;
        // dir93 = null;

        l123 = l109.add(NORTHWEST); // (-4, 1) from (-3, 0)
        d123 = 99999;
        // dir123 = null;

        l51 = l67.add(SOUTHWEST); // (-1, -4) from (0, -3)
        d51 = 99999;
        // dir51 = null;

        l171 = l157.add(NORTHWEST); // (-1, 4) from (0, 3)
        d171 = 99999;
        // dir171 = null;

        l53 = l67.add(SOUTHEAST); // (1, -4) from (0, -3)
        d53 = 99999;
        // dir53 = null;

        l173 = l157.add(NORTHEAST); // (1, 4) from (0, 3)
        d173 = 99999;
        // dir173 = null;

        l101 = l115.add(SOUTHEAST); // (4, -1) from (3, 0)
        d101 = 99999;
        // dir101 = null;

        l131 = l115.add(NORTHEAST); // (4, 1) from (3, 0)
        d131 = 99999;
        // dir131 = null;

        l64 = l80.add(SOUTHWEST); // (-3, -3) from (-2, -2)
        d64 = 99999;
        // dir64 = null;

        l154 = l140.add(NORTHWEST); // (-3, 3) from (-2, 2)
        d154 = 99999;
        // dir154 = null;

        l70 = l84.add(SOUTHEAST); // (3, -3) from (2, -2)
        d70 = 99999;
        // dir70 = null;

        l160 = l144.add(NORTHEAST); // (3, 3) from (2, 2)
        d160 = 99999;
        // dir160 = null;

        l78 = l94.add(SOUTHWEST); // (-4, -2) from (-3, -1)
        d78 = 99999;
        // dir78 = null;

        l138 = l124.add(NORTHWEST); // (-4, 2) from (-3, 1)
        d138 = 99999;
        // dir138 = null;

        l50 = l66.add(SOUTHWEST); // (-2, -4) from (-1, -3)
        d50 = 99999;
        // dir50 = null;

        l170 = l156.add(NORTHWEST); // (-2, 4) from (-1, 3)
        d170 = 99999;
        // dir170 = null;

        l54 = l68.add(SOUTHEAST); // (2, -4) from (1, -3)
        d54 = 99999;
        // dir54 = null;

        l174 = l158.add(NORTHEAST); // (2, 4) from (1, 3)
        d174 = 99999;
        // dir174 = null;

        l86 = l100.add(SOUTHEAST); // (4, -2) from (3, -1)
        d86 = 99999;
        // dir86 = null;

        l146 = l130.add(NORTHEAST); // (4, 2) from (3, 1)
        d146 = 99999;
        // dir146 = null;



        if (rc.canSenseLocation(l111) && rc.sensePassability(l111)) { // check (-1, 0) 
            if (d111 > d112) { // from (0, 0)
                d111 = 0.4375;
            }
            d111 += 1;
        }
        if (rc.canSenseLocation(l97) && rc.sensePassability(l97)) { // check (0, -1) 
            if (d97 > d112) { // from (0, 0)
                d97 = 0.5;
            }
            if (d97 > d111) { // from (-1, 0)
                d97 = d111;
            }
            d97 += 1;
        }
        if (rc.canSenseLocation(l127) && rc.sensePassability(l127)) { // check (0, 1) 
            if (d127 > d112) { // from (0, 0)
                d127 = 0.375;
            }
            if (d127 > d111) { // from (-1, 0)
                d127 = d111;
            }
            d127 += 1;
        }
        if (rc.canSenseLocation(l113) && rc.sensePassability(l113)) { // check (1, 0) 
            if (d113 > d112) { // from (0, 0)
                d113 = 0.3125;
            }
            if (d113 > d97) { // from (0, -1)
                d113 = d97;
            }
            if (d113 > d127) { // from (0, 1)
                d113 = d127;
            }
            d113 += 1;
        }
        if (rc.canSenseLocation(l96) && rc.sensePassability(l96)) { // check (-1, -1) 
            if (d96 > d112) { // from (0, 0)
                d96 = 0.1875;
            }
            if (d96 > d111) { // from (-1, 0)
                d96 = d111;
            }
            if (d96 > d97) { // from (0, -1)
                d96 = d97;
            }
            d96 += 1;
        }
        if (rc.canSenseLocation(l126) && rc.sensePassability(l126)) { // check (-1, 1) 
            if (d126 > d112) { // from (0, 0)
                d126 = 0.125;
            }
            if (d126 > d111) { // from (-1, 0)
                d126 = d111;
            }
            if (d126 > d127) { // from (0, 1)
                d126 = d127;
            }
            d126 += 1;
        }
        if (rc.canSenseLocation(l98) && rc.sensePassability(l98)) { // check (1, -1) 
            if (d98 > d112) { // from (0, 0)
                d98 = 0.25;
            }
            if (d98 > d97) { // from (0, -1)
                d98 = d97;
            }
            if (d98 > d113) { // from (1, 0)
                d98 = d113;
            }
            d98 += 1;
        }
        if (rc.canSenseLocation(l128) && rc.sensePassability(l128)) { // check (1, 1) 
            if (d128 > d112) { // from (0, 0)
                d128 = 0.0625;
            }
            if (d128 > d127) { // from (0, 1)
                d128 = d127;
            }
            if (d128 > d113) { // from (1, 0)
                d128 = d113;
            }
            d128 += 1;
        }
        if (rc.canSenseLocation(l110) && rc.sensePassability(l110)) { // check (-2, 0) 
            if (d110 > d111) { // from (-1, 0)
                d110 = d111;
            }
            if (d110 > d96) { // from (-1, -1)
                d110 = d96;
            }
            if (d110 > d126) { // from (-1, 1)
                d110 = d126;
            }
            d110 += 1;
        }
        if (rc.canSenseLocation(l82) && rc.sensePassability(l82)) { // check (0, -2) 
            if (d82 > d97) { // from (0, -1)
                d82 = d97;
            }
            if (d82 > d96) { // from (-1, -1)
                d82 = d96;
            }
            if (d82 > d98) { // from (1, -1)
                d82 = d98;
            }
            d82 += 1;
        }
        if (rc.canSenseLocation(l142) && rc.sensePassability(l142)) { // check (0, 2) 
            if (d142 > d127) { // from (0, 1)
                d142 = d127;
            }
            if (d142 > d126) { // from (-1, 1)
                d142 = d126;
            }
            if (d142 > d128) { // from (1, 1)
                d142 = d128;
            }
            d142 += 1;
        }
        if (rc.canSenseLocation(l114) && rc.sensePassability(l114)) { // check (2, 0) 
            if (d114 > d113) { // from (1, 0)
                d114 = d113;
            }
            if (d114 > d98) { // from (1, -1)
                d114 = d98;
            }
            if (d114 > d128) { // from (1, 1)
                d114 = d128;
            }
            d114 += 1;
        }
        if (rc.canSenseLocation(l95) && rc.sensePassability(l95)) { // check (-2, -1) 
            if (d95 > d111) { // from (-1, 0)
                d95 = d111;
            }
            if (d95 > d96) { // from (-1, -1)
                d95 = d96;
            }
            if (d95 > d110) { // from (-2, 0)
                d95 = d110;
            }
            d95 += 1;
        }
        if (rc.canSenseLocation(l125) && rc.sensePassability(l125)) { // check (-2, 1) 
            if (d125 > d111) { // from (-1, 0)
                d125 = d111;
            }
            if (d125 > d126) { // from (-1, 1)
                d125 = d126;
            }
            if (d125 > d110) { // from (-2, 0)
                d125 = d110;
            }
            d125 += 1;
        }
        if (rc.canSenseLocation(l81) && rc.sensePassability(l81)) { // check (-1, -2) 
            if (d81 > d97) { // from (0, -1)
                d81 = d97;
            }
            if (d81 > d96) { // from (-1, -1)
                d81 = d96;
            }
            if (d81 > d82) { // from (0, -2)
                d81 = d82;
            }
            if (d81 > d95) { // from (-2, -1)
                d81 = d95;
            }
            d81 += 1;
        }
        if (rc.canSenseLocation(l141) && rc.sensePassability(l141)) { // check (-1, 2) 
            if (d141 > d127) { // from (0, 1)
                d141 = d127;
            }
            if (d141 > d126) { // from (-1, 1)
                d141 = d126;
            }
            if (d141 > d142) { // from (0, 2)
                d141 = d142;
            }
            if (d141 > d125) { // from (-2, 1)
                d141 = d125;
            }
            d141 += 1;
        }
        if (rc.canSenseLocation(l83) && rc.sensePassability(l83)) { // check (1, -2) 
            if (d83 > d97) { // from (0, -1)
                d83 = d97;
            }
            if (d83 > d98) { // from (1, -1)
                d83 = d98;
            }
            if (d83 > d82) { // from (0, -2)
                d83 = d82;
            }
            d83 += 1;
        }
        if (rc.canSenseLocation(l143) && rc.sensePassability(l143)) { // check (1, 2) 
            if (d143 > d127) { // from (0, 1)
                d143 = d127;
            }
            if (d143 > d128) { // from (1, 1)
                d143 = d128;
            }
            if (d143 > d142) { // from (0, 2)
                d143 = d142;
            }
            d143 += 1;
        }
        if (rc.canSenseLocation(l99) && rc.sensePassability(l99)) { // check (2, -1) 
            if (d99 > d113) { // from (1, 0)
                d99 = d113;
            }
            if (d99 > d98) { // from (1, -1)
                d99 = d98;
            }
            if (d99 > d114) { // from (2, 0)
                d99 = d114;
            }
            if (d99 > d83) { // from (1, -2)
                d99 = d83;
            }
            d99 += 1;
        }
        if (rc.canSenseLocation(l129) && rc.sensePassability(l129)) { // check (2, 1) 
            if (d129 > d113) { // from (1, 0)
                d129 = d113;
            }
            if (d129 > d128) { // from (1, 1)
                d129 = d128;
            }
            if (d129 > d114) { // from (2, 0)
                d129 = d114;
            }
            if (d129 > d143) { // from (1, 2)
                d129 = d143;
            }
            d129 += 1;
        }
        if (rc.canSenseLocation(l80) && rc.sensePassability(l80)) { // check (-2, -2) 
            if (d80 > d96) { // from (-1, -1)
                d80 = d96;
            }
            if (d80 > d95) { // from (-2, -1)
                d80 = d95;
            }
            if (d80 > d81) { // from (-1, -2)
                d80 = d81;
            }
            d80 += 1;
        }
        if (rc.canSenseLocation(l140) && rc.sensePassability(l140)) { // check (-2, 2) 
            if (d140 > d126) { // from (-1, 1)
                d140 = d126;
            }
            if (d140 > d125) { // from (-2, 1)
                d140 = d125;
            }
            if (d140 > d141) { // from (-1, 2)
                d140 = d141;
            }
            d140 += 1;
        }
        if (rc.canSenseLocation(l84) && rc.sensePassability(l84)) { // check (2, -2) 
            if (d84 > d98) { // from (1, -1)
                d84 = d98;
            }
            if (d84 > d83) { // from (1, -2)
                d84 = d83;
            }
            if (d84 > d99) { // from (2, -1)
                d84 = d99;
            }
            d84 += 1;
        }
        if (rc.canSenseLocation(l144) && rc.sensePassability(l144)) { // check (2, 2) 
            if (d144 > d128) { // from (1, 1)
                d144 = d128;
            }
            if (d144 > d143) { // from (1, 2)
                d144 = d143;
            }
            if (d144 > d129) { // from (2, 1)
                d144 = d129;
            }
            d144 += 1;
        }
        if (rc.canSenseLocation(l109) && rc.sensePassability(l109)) { // check (-3, 0) 
            if (d109 > d110) { // from (-2, 0)
                d109 = d110;
            }
            if (d109 > d95) { // from (-2, -1)
                d109 = d95;
            }
            if (d109 > d125) { // from (-2, 1)
                d109 = d125;
            }
            d109 += 1;
        }
        if (rc.canSenseLocation(l67) && rc.sensePassability(l67)) { // check (0, -3) 
            if (d67 > d82) { // from (0, -2)
                d67 = d82;
            }
            if (d67 > d81) { // from (-1, -2)
                d67 = d81;
            }
            if (d67 > d83) { // from (1, -2)
                d67 = d83;
            }
            d67 += 1;
        }
        if (rc.canSenseLocation(l157) && rc.sensePassability(l157)) { // check (0, 3) 
            if (d157 > d142) { // from (0, 2)
                d157 = d142;
            }
            if (d157 > d141) { // from (-1, 2)
                d157 = d141;
            }
            if (d157 > d143) { // from (1, 2)
                d157 = d143;
            }
            d157 += 1;
        }
        if (rc.canSenseLocation(l115) && rc.sensePassability(l115)) { // check (3, 0) 
            if (d115 > d114) { // from (2, 0)
                d115 = d114;
            }
            if (d115 > d99) { // from (2, -1)
                d115 = d99;
            }
            if (d115 > d129) { // from (2, 1)
                d115 = d129;
            }
            d115 += 1;
        }
        if (rc.canSenseLocation(l94) && rc.sensePassability(l94)) { // check (-3, -1) 
            if (d94 > d110) { // from (-2, 0)
                d94 = d110;
            }
            if (d94 > d95) { // from (-2, -1)
                d94 = d95;
            }
            if (d94 > d80) { // from (-2, -2)
                d94 = d80;
            }
            if (d94 > d109) { // from (-3, 0)
                d94 = d109;
            }
            d94 += 1;
        }
        if (rc.canSenseLocation(l124) && rc.sensePassability(l124)) { // check (-3, 1) 
            if (d124 > d110) { // from (-2, 0)
                d124 = d110;
            }
            if (d124 > d125) { // from (-2, 1)
                d124 = d125;
            }
            if (d124 > d140) { // from (-2, 2)
                d124 = d140;
            }
            if (d124 > d109) { // from (-3, 0)
                d124 = d109;
            }
            d124 += 1;
        }
        if (rc.canSenseLocation(l66) && rc.sensePassability(l66)) { // check (-1, -3) 
            if (d66 > d82) { // from (0, -2)
                d66 = d82;
            }
            if (d66 > d81) { // from (-1, -2)
                d66 = d81;
            }
            if (d66 > d80) { // from (-2, -2)
                d66 = d80;
            }
            if (d66 > d67) { // from (0, -3)
                d66 = d67;
            }
            d66 += 1;
        }
        if (rc.canSenseLocation(l156) && rc.sensePassability(l156)) { // check (-1, 3) 
            if (d156 > d142) { // from (0, 2)
                d156 = d142;
            }
            if (d156 > d141) { // from (-1, 2)
                d156 = d141;
            }
            if (d156 > d140) { // from (-2, 2)
                d156 = d140;
            }
            if (d156 > d157) { // from (0, 3)
                d156 = d157;
            }
            d156 += 1;
        }
        if (rc.canSenseLocation(l68) && rc.sensePassability(l68)) { // check (1, -3) 
            if (d68 > d82) { // from (0, -2)
                d68 = d82;
            }
            if (d68 > d83) { // from (1, -2)
                d68 = d83;
            }
            if (d68 > d84) { // from (2, -2)
                d68 = d84;
            }
            if (d68 > d67) { // from (0, -3)
                d68 = d67;
            }
            d68 += 1;
        }
        if (rc.canSenseLocation(l158) && rc.sensePassability(l158)) { // check (1, 3) 
            if (d158 > d142) { // from (0, 2)
                d158 = d142;
            }
            if (d158 > d143) { // from (1, 2)
                d158 = d143;
            }
            if (d158 > d144) { // from (2, 2)
                d158 = d144;
            }
            if (d158 > d157) { // from (0, 3)
                d158 = d157;
            }
            d158 += 1;
        }
        if (rc.canSenseLocation(l100) && rc.sensePassability(l100)) { // check (3, -1) 
            if (d100 > d114) { // from (2, 0)
                d100 = d114;
            }
            if (d100 > d99) { // from (2, -1)
                d100 = d99;
            }
            if (d100 > d84) { // from (2, -2)
                d100 = d84;
            }
            if (d100 > d115) { // from (3, 0)
                d100 = d115;
            }
            d100 += 1;
        }
        if (rc.canSenseLocation(l130) && rc.sensePassability(l130)) { // check (3, 1) 
            if (d130 > d114) { // from (2, 0)
                d130 = d114;
            }
            if (d130 > d129) { // from (2, 1)
                d130 = d129;
            }
            if (d130 > d144) { // from (2, 2)
                d130 = d144;
            }
            if (d130 > d115) { // from (3, 0)
                d130 = d115;
            }
            d130 += 1;
        }
        if (rc.canSenseLocation(l79) && rc.sensePassability(l79)) { // check (-3, -2) 
            if (d79 > d95) { // from (-2, -1)
                d79 = d95;
            }
            if (d79 > d80) { // from (-2, -2)
                d79 = d80;
            }
            if (d79 > d94) { // from (-3, -1)
                d79 = d94;
            }
            d79 += 1;
        }
        if (rc.canSenseLocation(l139) && rc.sensePassability(l139)) { // check (-3, 2) 
            if (d139 > d125) { // from (-2, 1)
                d139 = d125;
            }
            if (d139 > d140) { // from (-2, 2)
                d139 = d140;
            }
            if (d139 > d124) { // from (-3, 1)
                d139 = d124;
            }
            d139 += 1;
        }
        if (rc.canSenseLocation(l65) && rc.sensePassability(l65)) { // check (-2, -3) 
            if (d65 > d81) { // from (-1, -2)
                d65 = d81;
            }
            if (d65 > d80) { // from (-2, -2)
                d65 = d80;
            }
            if (d65 > d66) { // from (-1, -3)
                d65 = d66;
            }
            if (d65 > d79) { // from (-3, -2)
                d65 = d79;
            }
            d65 += 1;
        }
        if (rc.canSenseLocation(l155) && rc.sensePassability(l155)) { // check (-2, 3) 
            if (d155 > d141) { // from (-1, 2)
                d155 = d141;
            }
            if (d155 > d140) { // from (-2, 2)
                d155 = d140;
            }
            if (d155 > d156) { // from (-1, 3)
                d155 = d156;
            }
            if (d155 > d139) { // from (-3, 2)
                d155 = d139;
            }
            d155 += 1;
        }
        if (rc.canSenseLocation(l69) && rc.sensePassability(l69)) { // check (2, -3) 
            if (d69 > d83) { // from (1, -2)
                d69 = d83;
            }
            if (d69 > d84) { // from (2, -2)
                d69 = d84;
            }
            if (d69 > d68) { // from (1, -3)
                d69 = d68;
            }
            d69 += 1;
        }
        if (rc.canSenseLocation(l159) && rc.sensePassability(l159)) { // check (2, 3) 
            if (d159 > d143) { // from (1, 2)
                d159 = d143;
            }
            if (d159 > d144) { // from (2, 2)
                d159 = d144;
            }
            if (d159 > d158) { // from (1, 3)
                d159 = d158;
            }
            d159 += 1;
        }
        if (rc.canSenseLocation(l85) && rc.sensePassability(l85)) { // check (3, -2) 
            if (d85 > d99) { // from (2, -1)
                d85 = d99;
            }
            if (d85 > d84) { // from (2, -2)
                d85 = d84;
            }
            if (d85 > d100) { // from (3, -1)
                d85 = d100;
            }
            if (d85 > d69) { // from (2, -3)
                d85 = d69;
            }
            d85 += 1;
        }
        if (rc.canSenseLocation(l145) && rc.sensePassability(l145)) { // check (3, 2) 
            if (d145 > d129) { // from (2, 1)
                d145 = d129;
            }
            if (d145 > d144) { // from (2, 2)
                d145 = d144;
            }
            if (d145 > d130) { // from (3, 1)
                d145 = d130;
            }
            if (d145 > d159) { // from (2, 3)
                d145 = d159;
            }
            d145 += 1;
        }
        if (rc.canSenseLocation(l108) && rc.sensePassability(l108)) { // check (-4, 0) 
            if (d108 > d109) { // from (-3, 0)
                d108 = d109;
            }
            if (d108 > d94) { // from (-3, -1)
                d108 = d94;
            }
            if (d108 > d124) { // from (-3, 1)
                d108 = d124;
            }
            d108 += 1;
        }
        if (rc.canSenseLocation(l52) && rc.sensePassability(l52)) { // check (0, -4) 
            if (d52 > d67) { // from (0, -3)
                d52 = d67;
            }
            if (d52 > d66) { // from (-1, -3)
                d52 = d66;
            }
            if (d52 > d68) { // from (1, -3)
                d52 = d68;
            }
            d52 += 1;
        }
        if (rc.canSenseLocation(l172) && rc.sensePassability(l172)) { // check (0, 4) 
            if (d172 > d157) { // from (0, 3)
                d172 = d157;
            }
            if (d172 > d156) { // from (-1, 3)
                d172 = d156;
            }
            if (d172 > d158) { // from (1, 3)
                d172 = d158;
            }
            d172 += 1;
        }
        if (rc.canSenseLocation(l116) && rc.sensePassability(l116)) { // check (4, 0) 
            if (d116 > d115) { // from (3, 0)
                d116 = d115;
            }
            if (d116 > d100) { // from (3, -1)
                d116 = d100;
            }
            if (d116 > d130) { // from (3, 1)
                d116 = d130;
            }
            d116 += 1;
        }
        if (rc.canSenseLocation(l93) && rc.sensePassability(l93)) { // check (-4, -1) 
            if (d93 > d109) { // from (-3, 0)
                d93 = d109;
            }
            if (d93 > d94) { // from (-3, -1)
                d93 = d94;
            }
            if (d93 > d79) { // from (-3, -2)
                d93 = d79;
            }
            if (d93 > d108) { // from (-4, 0)
                d93 = d108;
            }
            d93 += 1;
        }
        if (rc.canSenseLocation(l123) && rc.sensePassability(l123)) { // check (-4, 1) 
            if (d123 > d109) { // from (-3, 0)
                d123 = d109;
            }
            if (d123 > d124) { // from (-3, 1)
                d123 = d124;
            }
            if (d123 > d139) { // from (-3, 2)
                d123 = d139;
            }
            if (d123 > d108) { // from (-4, 0)
                d123 = d108;
            }
            d123 += 1;
        }
        if (rc.canSenseLocation(l51) && rc.sensePassability(l51)) { // check (-1, -4) 
            if (d51 > d67) { // from (0, -3)
                d51 = d67;
            }
            if (d51 > d66) { // from (-1, -3)
                d51 = d66;
            }
            if (d51 > d65) { // from (-2, -3)
                d51 = d65;
            }
            if (d51 > d52) { // from (0, -4)
                d51 = d52;
            }
            d51 += 1;
        }
        if (rc.canSenseLocation(l171) && rc.sensePassability(l171)) { // check (-1, 4) 
            if (d171 > d157) { // from (0, 3)
                d171 = d157;
            }
            if (d171 > d156) { // from (-1, 3)
                d171 = d156;
            }
            if (d171 > d155) { // from (-2, 3)
                d171 = d155;
            }
            if (d171 > d172) { // from (0, 4)
                d171 = d172;
            }
            d171 += 1;
        }
        if (rc.canSenseLocation(l53) && rc.sensePassability(l53)) { // check (1, -4) 
            if (d53 > d67) { // from (0, -3)
                d53 = d67;
            }
            if (d53 > d68) { // from (1, -3)
                d53 = d68;
            }
            if (d53 > d69) { // from (2, -3)
                d53 = d69;
            }
            if (d53 > d52) { // from (0, -4)
                d53 = d52;
            }
            d53 += 1;
        }
        if (rc.canSenseLocation(l173) && rc.sensePassability(l173)) { // check (1, 4) 
            if (d173 > d157) { // from (0, 3)
                d173 = d157;
            }
            if (d173 > d158) { // from (1, 3)
                d173 = d158;
            }
            if (d173 > d159) { // from (2, 3)
                d173 = d159;
            }
            if (d173 > d172) { // from (0, 4)
                d173 = d172;
            }
            d173 += 1;
        }
        if (rc.canSenseLocation(l101) && rc.sensePassability(l101)) { // check (4, -1) 
            if (d101 > d115) { // from (3, 0)
                d101 = d115;
            }
            if (d101 > d100) { // from (3, -1)
                d101 = d100;
            }
            if (d101 > d85) { // from (3, -2)
                d101 = d85;
            }
            if (d101 > d116) { // from (4, 0)
                d101 = d116;
            }
            d101 += 1;
        }
        if (rc.canSenseLocation(l131) && rc.sensePassability(l131)) { // check (4, 1) 
            if (d131 > d115) { // from (3, 0)
                d131 = d115;
            }
            if (d131 > d130) { // from (3, 1)
                d131 = d130;
            }
            if (d131 > d145) { // from (3, 2)
                d131 = d145;
            }
            if (d131 > d116) { // from (4, 0)
                d131 = d116;
            }
            d131 += 1;
        }
        if (rc.canSenseLocation(l64) && rc.sensePassability(l64)) { // check (-3, -3) 
            if (d64 > d80) { // from (-2, -2)
                d64 = d80;
            }
            if (d64 > d79) { // from (-3, -2)
                d64 = d79;
            }
            if (d64 > d65) { // from (-2, -3)
                d64 = d65;
            }
            d64 += 1;
        }
        if (rc.canSenseLocation(l154) && rc.sensePassability(l154)) { // check (-3, 3) 
            if (d154 > d140) { // from (-2, 2)
                d154 = d140;
            }
            if (d154 > d139) { // from (-3, 2)
                d154 = d139;
            }
            if (d154 > d155) { // from (-2, 3)
                d154 = d155;
            }
            d154 += 1;
        }
        if (rc.canSenseLocation(l70) && rc.sensePassability(l70)) { // check (3, -3) 
            if (d70 > d84) { // from (2, -2)
                d70 = d84;
            }
            if (d70 > d69) { // from (2, -3)
                d70 = d69;
            }
            if (d70 > d85) { // from (3, -2)
                d70 = d85;
            }
            d70 += 1;
        }
        if (rc.canSenseLocation(l160) && rc.sensePassability(l160)) { // check (3, 3) 
            if (d160 > d144) { // from (2, 2)
                d160 = d144;
            }
            if (d160 > d159) { // from (2, 3)
                d160 = d159;
            }
            if (d160 > d145) { // from (3, 2)
                d160 = d145;
            }
            d160 += 1;
        }
        if (rc.canSenseLocation(l78) && rc.sensePassability(l78)) { // check (-4, -2) 
            if (d78 > d94) { // from (-3, -1)
                d78 = d94;
            }
            if (d78 > d79) { // from (-3, -2)
                d78 = d79;
            }
            if (d78 > d93) { // from (-4, -1)
                d78 = d93;
            }
            if (d78 > d64) { // from (-3, -3)
                d78 = d64;
            }
            d78 += 1;
        }
        if (rc.canSenseLocation(l138) && rc.sensePassability(l138)) { // check (-4, 2) 
            if (d138 > d124) { // from (-3, 1)
                d138 = d124;
            }
            if (d138 > d139) { // from (-3, 2)
                d138 = d139;
            }
            if (d138 > d123) { // from (-4, 1)
                d138 = d123;
            }
            if (d138 > d154) { // from (-3, 3)
                d138 = d154;
            }
            d138 += 1;
        }
        if (rc.canSenseLocation(l50) && rc.sensePassability(l50)) { // check (-2, -4) 
            if (d50 > d66) { // from (-1, -3)
                d50 = d66;
            }
            if (d50 > d65) { // from (-2, -3)
                d50 = d65;
            }
            if (d50 > d51) { // from (-1, -4)
                d50 = d51;
            }
            if (d50 > d64) { // from (-3, -3)
                d50 = d64;
            }
            d50 += 1;
        }
        if (rc.canSenseLocation(l170) && rc.sensePassability(l170)) { // check (-2, 4) 
            if (d170 > d156) { // from (-1, 3)
                d170 = d156;
            }
            if (d170 > d155) { // from (-2, 3)
                d170 = d155;
            }
            if (d170 > d171) { // from (-1, 4)
                d170 = d171;
            }
            if (d170 > d154) { // from (-3, 3)
                d170 = d154;
            }
            d170 += 1;
        }
        if (rc.canSenseLocation(l54) && rc.sensePassability(l54)) { // check (2, -4) 
            if (d54 > d68) { // from (1, -3)
                d54 = d68;
            }
            if (d54 > d69) { // from (2, -3)
                d54 = d69;
            }
            if (d54 > d53) { // from (1, -4)
                d54 = d53;
            }
            if (d54 > d70) { // from (3, -3)
                d54 = d70;
            }
            d54 += 1;
        }
        if (rc.canSenseLocation(l174) && rc.sensePassability(l174)) { // check (2, 4) 
            if (d174 > d158) { // from (1, 3)
                d174 = d158;
            }
            if (d174 > d159) { // from (2, 3)
                d174 = d159;
            }
            if (d174 > d173) { // from (1, 4)
                d174 = d173;
            }
            if (d174 > d160) { // from (3, 3)
                d174 = d160;
            }
            d174 += 1;
        }
        if (rc.canSenseLocation(l86) && rc.sensePassability(l86)) { // check (4, -2) 
            if (d86 > d100) { // from (3, -1)
                d86 = d100;
            }
            if (d86 > d85) { // from (3, -2)
                d86 = d85;
            }
            if (d86 > d101) { // from (4, -1)
                d86 = d101;
            }
            if (d86 > d70) { // from (3, -3)
                d86 = d70;
            }
            d86 += 1;
        }
        if (rc.canSenseLocation(l146) && rc.sensePassability(l146)) { // check (4, 2) 
            if (d146 > d130) { // from (3, 1)
                d146 = d130;
            }
            if (d146 > d145) { // from (3, 2)
                d146 = d145;
            }
            if (d146 > d131) { // from (4, 1)
                d146 = d131;
            }
            if (d146 > d160) { // from (3, 3)
                d146 = d160;
            }
            d146 += 1;
        }
    }
    
    public static double getDis(MapLocation target) throws GameActionException {

        int target_dx = target.x - l112.x;
        int target_dy = target.y - l112.y;
        switch (target_dx) {
                case -4:
                    switch (target_dy) {
                        case -2:
                            return d78; // destination is at relative location (-4, -2)
                        case -1:
                            return d93; // destination is at relative location (-4, -1)
                        case 0:
                            return d108; // destination is at relative location (-4, 0)
                        case 1:
                            return d123; // destination is at relative location (-4, 1)
                        case 2:
                            return d138; // destination is at relative location (-4, 2)
                    }
                    break;
                case -3:
                    switch (target_dy) {
                        case -3:
                            return d64; // destination is at relative location (-3, -3)
                        case -2:
                            return d79; // destination is at relative location (-3, -2)
                        case -1:
                            return d94; // destination is at relative location (-3, -1)
                        case 0:
                            return d109; // destination is at relative location (-3, 0)
                        case 1:
                            return d124; // destination is at relative location (-3, 1)
                        case 2:
                            return d139; // destination is at relative location (-3, 2)
                        case 3:
                            return d154; // destination is at relative location (-3, 3)
                    }
                    break;
                case -2:
                    switch (target_dy) {
                        case -4:
                            return d50; // destination is at relative location (-2, -4)
                        case -3:
                            return d65; // destination is at relative location (-2, -3)
                        case -2:
                            return d80; // destination is at relative location (-2, -2)
                        case -1:
                            return d95; // destination is at relative location (-2, -1)
                        case 0:
                            return d110; // destination is at relative location (-2, 0)
                        case 1:
                            return d125; // destination is at relative location (-2, 1)
                        case 2:
                            return d140; // destination is at relative location (-2, 2)
                        case 3:
                            return d155; // destination is at relative location (-2, 3)
                        case 4:
                            return d170; // destination is at relative location (-2, 4)
                    }
                    break;
                case -1:
                    switch (target_dy) {
                        case -4:
                            return d51; // destination is at relative location (-1, -4)
                        case -3:
                            return d66; // destination is at relative location (-1, -3)
                        case -2:
                            return d81; // destination is at relative location (-1, -2)
                        case -1:
                            return d96; // destination is at relative location (-1, -1)
                        case 0:
                            return d111; // destination is at relative location (-1, 0)
                        case 1:
                            return d126; // destination is at relative location (-1, 1)
                        case 2:
                            return d141; // destination is at relative location (-1, 2)
                        case 3:
                            return d156; // destination is at relative location (-1, 3)
                        case 4:
                            return d171; // destination is at relative location (-1, 4)
                    }
                    break;
                case 0:
                    switch (target_dy) {
                        case -4:
                            return d52; // destination is at relative location (0, -4)
                        case -3:
                            return d67; // destination is at relative location (0, -3)
                        case -2:
                            return d82; // destination is at relative location (0, -2)
                        case -1:
                            return d97; // destination is at relative location (0, -1)
                        case 0:
                            return d112; // destination is at relative location (0, 0)
                        case 1:
                            return d127; // destination is at relative location (0, 1)
                        case 2:
                            return d142; // destination is at relative location (0, 2)
                        case 3:
                            return d157; // destination is at relative location (0, 3)
                        case 4:
                            return d172; // destination is at relative location (0, 4)
                    }
                    break;
                case 1:
                    switch (target_dy) {
                        case -4:
                            return d53; // destination is at relative location (1, -4)
                        case -3:
                            return d68; // destination is at relative location (1, -3)
                        case -2:
                            return d83; // destination is at relative location (1, -2)
                        case -1:
                            return d98; // destination is at relative location (1, -1)
                        case 0:
                            return d113; // destination is at relative location (1, 0)
                        case 1:
                            return d128; // destination is at relative location (1, 1)
                        case 2:
                            return d143; // destination is at relative location (1, 2)
                        case 3:
                            return d158; // destination is at relative location (1, 3)
                        case 4:
                            return d173; // destination is at relative location (1, 4)
                    }
                    break;
                case 2:
                    switch (target_dy) {
                        case -4:
                            return d54; // destination is at relative location (2, -4)
                        case -3:
                            return d69; // destination is at relative location (2, -3)
                        case -2:
                            return d84; // destination is at relative location (2, -2)
                        case -1:
                            return d99; // destination is at relative location (2, -1)
                        case 0:
                            return d114; // destination is at relative location (2, 0)
                        case 1:
                            return d129; // destination is at relative location (2, 1)
                        case 2:
                            return d144; // destination is at relative location (2, 2)
                        case 3:
                            return d159; // destination is at relative location (2, 3)
                        case 4:
                            return d174; // destination is at relative location (2, 4)
                    }
                    break;
                case 3:
                    switch (target_dy) {
                        case -3:
                            return d70; // destination is at relative location (3, -3)
                        case -2:
                            return d85; // destination is at relative location (3, -2)
                        case -1:
                            return d100; // destination is at relative location (3, -1)
                        case 0:
                            return d115; // destination is at relative location (3, 0)
                        case 1:
                            return d130; // destination is at relative location (3, 1)
                        case 2:
                            return d145; // destination is at relative location (3, 2)
                        case 3:
                            return d160; // destination is at relative location (3, 3)
                    }
                    break;
                case 4:
                    switch (target_dy) {
                        case -2:
                            return d86; // destination is at relative location (4, -2)
                        case -1:
                            return d101; // destination is at relative location (4, -1)
                        case 0:
                            return d116; // destination is at relative location (4, 0)
                        case 1:
                            return d131; // destination is at relative location (4, 1)
                        case 2:
                            return d146; // destination is at relative location (4, 2)
                    }
                    break;
        }
        return 9999999;
        
    }
}
